swagger: "2.0"

info:
  version: "1.0.3"
  title: "My ToDoList"
  description: "Тестовое задание цель которого реализация ToDo списка дел, "

paths:
  /user:
    post:
      operationId: newUser
      tags:
        - user
      summary: Запрос на создание пользователя
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: fullName
          schema:
            type: string
          description: new
      responses:
        201:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - user
      summary: Запрос на получение полного списка пользователей
      operationId: getUserList
      consumes:
        - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /user/{userId}:
    get:
      tags:
        - user
      description: Возвращает всю информацию о пользователе
      summary: Запрос на получение информации о пользователе по айди
      operationId: getUserInfoById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - user
      description: "Изменение ФИО пользователя"
      summary: "Запрос на изменение информации о пользователе"
      operationId: updateUserInfoById
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - user
      summary: Запрос на удаление пользователя
      description: Полное удаление информации о пользователе, вместе  спринадлежащими ему группами
      operationId: removeUserById
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'


  /user/{userId}/group:
    get:
      tags:
        - group
      summary: Запрос на получение групп пользователя
      operationId: getGroupListByUserId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - group
      summary: Запрос на создание новой группы для айтемов
      operationId: createNewGroupForUser
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /user/{userId}/group/{groupId}:
    get:
      tags:
        - group
      summary: Запрос на получение инфромации о пользователе
      operationId: getGroupsByUserId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - group
      summary: Запрос на изменение информации о группе
      operationId: updateGroupInfoByGroupId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - group
      summary: Запрос на удаление группы
      description: Полное удаление группы и принадлежащих ей айтемов
      operationId: removeGroupByGroupId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'

  /user/{userId}/group/{groupId}/item:
    get:
      tags:
        - item
      summary: Запрос на получение списка айтемов в группе
      operationId: getItemListByGroupId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - item
      summary: Запрос на создание нового айтема в группе
      operationId: createNewItemInGroup
      consumes:
        - application/json
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /user/{userId}/group/{groupId}/item/{itemId}:
    get:
      tags:
        - item
      summary: Запрос на получение инфромации о айтеме
      operationId: getItemInfoByUserId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
        - name: "itemId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - item
      summary: Запрос на изменение информации о айтеме
      operationId: updateItemInfoByItemId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
        - name: "itemId"
          in: "path"
          required: true
          type: string
        - in: body
          name: body
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - item
      summary: Запрос на удаление айтема
      operationId: removeItemByItemId
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: string
        - name: "groupId"
          in: "path"
          required: true
          type: string
        - name: "itemId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/Response'
        400:
          description: Error
          schema:
            $ref: '#/definitions/Error'


definitions:
  User:
    description: "Пользователь программы"
    type: object
    properties:
      id:
        type: string
        example: "5f5f64b79974c54e17df7ece"
      fullName:
        type: string
        example: "Иванов Иван Иванович"
  Group:
    description: "Раздел/Группа дел"
    type: object
    properties:
      id:
        type: string
        example: "4e7f64b79974c32e17df7ece"
      name:
        type: string
        example: "Домашние дела"
      userId:
        type: string
        example: "5f5f64b79974c54e17df7ece"
  Item:
    description: "Элемент списка ToDo"
    type: object
    properties:
      id:
        type: string
        example: "2d9f51b74074c67e21df7aga"
      name:
        type: string
        example: "Закончить проект"
      groupId:
        type: string
        example: "4e7f64b79974c32e17df7ece"
      activity:
        type: "boolean"
        example: true

  Error:
    properties:
      resultCode:
        type: integer
        example: 400
      resultMessage:
        type: string
        example: Всё сломалось.
  Response:
    properties:
      resultCode:
        type: integer
        example: 200
      resultMessage:
        type: string
        example: Выполнено успешно